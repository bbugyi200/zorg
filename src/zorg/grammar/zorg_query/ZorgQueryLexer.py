# Generated from ZorgQuery.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,61,359,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
        9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,
        1,24,1,24,1,24,1,24,1,25,3,25,220,8,25,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,
        1,33,1,33,1,33,1,34,1,34,1,34,5,34,259,8,34,10,34,12,34,262,9,34,
        1,35,1,35,1,35,1,35,1,35,3,35,269,8,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,5,37,281,8,37,10,37,12,37,284,9,37,1,38,
        1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,41,1,41,
        1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,
        1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,
        1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,
        1,61,1,62,1,62,1,63,1,63,3,63,344,8,63,1,64,1,64,1,65,1,65,1,66,
        1,66,1,67,1,67,3,67,354,8,67,1,68,1,68,3,68,358,8,68,0,0,69,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,
        57,115,58,117,59,119,60,121,61,123,0,125,0,127,0,129,0,131,0,133,
        0,135,0,137,0,1,0,2,9,0,33,33,38,38,44,44,59,59,61,61,63,63,91,93,
        96,96,123,125,6,0,65,72,74,78,80,90,97,105,107,107,109,122,359,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
        0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
        0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,
        0,0,0,0,121,1,0,0,0,1,139,1,0,0,0,3,141,1,0,0,0,5,143,1,0,0,0,7,
        145,1,0,0,0,9,147,1,0,0,0,11,152,1,0,0,0,13,155,1,0,0,0,15,157,1,
        0,0,0,17,159,1,0,0,0,19,161,1,0,0,0,21,163,1,0,0,0,23,165,1,0,0,
        0,25,167,1,0,0,0,27,169,1,0,0,0,29,171,1,0,0,0,31,173,1,0,0,0,33,
        175,1,0,0,0,35,177,1,0,0,0,37,180,1,0,0,0,39,183,1,0,0,0,41,185,
        1,0,0,0,43,192,1,0,0,0,45,199,1,0,0,0,47,208,1,0,0,0,49,213,1,0,
        0,0,51,219,1,0,0,0,53,223,1,0,0,0,55,225,1,0,0,0,57,227,1,0,0,0,
        59,238,1,0,0,0,61,243,1,0,0,0,63,246,1,0,0,0,65,249,1,0,0,0,67,252,
        1,0,0,0,69,255,1,0,0,0,71,263,1,0,0,0,73,270,1,0,0,0,75,277,1,0,
        0,0,77,285,1,0,0,0,79,289,1,0,0,0,81,295,1,0,0,0,83,297,1,0,0,0,
        85,299,1,0,0,0,87,301,1,0,0,0,89,303,1,0,0,0,91,305,1,0,0,0,93,307,
        1,0,0,0,95,309,1,0,0,0,97,311,1,0,0,0,99,313,1,0,0,0,101,315,1,0,
        0,0,103,317,1,0,0,0,105,319,1,0,0,0,107,321,1,0,0,0,109,323,1,0,
        0,0,111,325,1,0,0,0,113,327,1,0,0,0,115,329,1,0,0,0,117,331,1,0,
        0,0,119,333,1,0,0,0,121,335,1,0,0,0,123,337,1,0,0,0,125,339,1,0,
        0,0,127,343,1,0,0,0,129,345,1,0,0,0,131,347,1,0,0,0,133,349,1,0,
        0,0,135,353,1,0,0,0,137,357,1,0,0,0,139,140,5,83,0,0,140,2,1,0,0,
        0,141,142,5,87,0,0,142,4,1,0,0,0,143,144,5,79,0,0,144,6,1,0,0,0,
        145,146,5,71,0,0,146,8,1,0,0,0,147,148,5,110,0,0,148,149,5,111,0,
        0,149,150,5,116,0,0,150,151,5,101,0,0,151,10,1,0,0,0,152,153,5,111,
        0,0,153,154,5,114,0,0,154,12,1,0,0,0,155,156,5,49,0,0,156,14,1,0,
        0,0,157,158,5,50,0,0,158,16,1,0,0,0,159,160,5,51,0,0,160,18,1,0,
        0,0,161,162,5,52,0,0,162,20,1,0,0,0,163,164,5,53,0,0,164,22,1,0,
        0,0,165,166,5,54,0,0,166,24,1,0,0,0,167,168,5,55,0,0,168,26,1,0,
        0,0,169,170,5,56,0,0,170,28,1,0,0,0,171,172,5,57,0,0,172,30,1,0,
        0,0,173,174,5,33,0,0,174,32,1,0,0,0,175,176,5,48,0,0,176,34,1,0,
        0,0,177,178,5,60,0,0,178,179,5,61,0,0,179,36,1,0,0,0,180,181,5,62,
        0,0,181,182,5,61,0,0,182,38,1,0,0,0,183,184,5,99,0,0,184,40,1,0,
        0,0,185,186,5,99,0,0,186,187,5,114,0,0,187,188,5,101,0,0,188,189,
        5,97,0,0,189,190,5,116,0,0,190,191,5,101,0,0,191,42,1,0,0,0,192,
        193,5,109,0,0,193,194,5,111,0,0,194,195,5,100,0,0,195,196,5,105,
        0,0,196,197,5,102,0,0,197,198,5,121,0,0,198,44,1,0,0,0,199,200,5,
        112,0,0,200,201,5,114,0,0,201,202,5,105,0,0,202,203,5,111,0,0,203,
        204,5,114,0,0,204,205,5,105,0,0,205,206,5,116,0,0,206,207,5,121,
        0,0,207,46,1,0,0,0,208,209,5,102,0,0,209,210,5,105,0,0,210,211,5,
        108,0,0,211,212,5,101,0,0,212,48,1,0,0,0,213,214,5,116,0,0,214,215,
        5,121,0,0,215,216,5,112,0,0,216,217,5,101,0,0,217,50,1,0,0,0,218,
        220,5,13,0,0,219,218,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,
        222,5,10,0,0,222,52,1,0,0,0,223,224,5,111,0,0,224,54,1,0,0,0,225,
        226,5,120,0,0,226,56,1,0,0,0,227,228,5,50,0,0,228,229,3,129,64,0,
        229,230,3,129,64,0,230,231,3,129,64,0,231,232,3,87,43,0,232,233,
        3,133,66,0,233,234,3,129,64,0,234,235,3,87,43,0,235,236,3,131,65,
        0,236,237,3,129,64,0,237,58,1,0,0,0,238,239,2,48,50,0,239,240,3,
        129,64,0,240,241,2,48,53,0,241,242,3,129,64,0,242,60,1,0,0,0,243,
        244,3,85,42,0,244,245,3,73,36,0,245,62,1,0,0,0,246,247,3,83,41,0,
        247,248,3,73,36,0,248,64,1,0,0,0,249,250,3,121,60,0,250,251,3,73,
        36,0,251,66,1,0,0,0,252,253,5,80,0,0,253,254,3,129,64,0,254,68,1,
        0,0,0,255,260,3,137,68,0,256,259,3,137,68,0,257,259,3,93,46,0,258,
        256,1,0,0,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,
        261,1,0,0,0,261,70,1,0,0,0,262,260,1,0,0,0,263,264,3,73,36,0,264,
        265,3,101,50,0,265,266,3,127,63,0,266,268,3,127,63,0,267,269,3,127,
        63,0,268,267,1,0,0,0,268,269,1,0,0,0,269,72,1,0,0,0,270,271,3,129,
        64,0,271,272,3,129,64,0,272,273,3,133,66,0,273,274,3,129,64,0,274,
        275,3,131,65,0,275,276,3,129,64,0,276,74,1,0,0,0,277,282,3,129,64,
        0,278,281,3,137,68,0,279,281,3,93,46,0,280,278,1,0,0,0,280,279,1,
        0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,76,1,0,
        0,0,284,282,1,0,0,0,285,286,5,32,0,0,286,287,5,32,0,0,287,288,5,
        45,0,0,288,78,1,0,0,0,289,290,5,32,0,0,290,291,5,32,0,0,291,292,
        5,32,0,0,292,293,5,32,0,0,293,294,5,45,0,0,294,80,1,0,0,0,295,296,
        7,0,0,0,296,82,1,0,0,0,297,298,5,36,0,0,298,84,1,0,0,0,299,300,5,
        94,0,0,300,86,1,0,0,0,301,302,5,45,0,0,302,88,1,0,0,0,303,304,5,
        46,0,0,304,90,1,0,0,0,305,306,5,47,0,0,306,92,1,0,0,0,307,308,5,
        95,0,0,308,94,1,0,0,0,309,310,5,32,0,0,310,96,1,0,0,0,311,312,5,
        40,0,0,312,98,1,0,0,0,313,314,5,41,0,0,314,100,1,0,0,0,315,316,5,
        35,0,0,316,102,1,0,0,0,317,318,5,64,0,0,318,104,1,0,0,0,319,320,
        5,43,0,0,320,106,1,0,0,0,321,322,5,37,0,0,322,108,1,0,0,0,323,324,
        5,39,0,0,324,110,1,0,0,0,325,326,5,34,0,0,326,112,1,0,0,0,327,328,
        5,126,0,0,328,114,1,0,0,0,329,330,5,42,0,0,330,116,1,0,0,0,331,332,
        5,60,0,0,332,118,1,0,0,0,333,334,5,62,0,0,334,120,1,0,0,0,335,336,
        5,58,0,0,336,122,1,0,0,0,337,338,2,65,90,0,338,124,1,0,0,0,339,340,
        2,97,122,0,340,126,1,0,0,0,341,344,3,129,64,0,342,344,7,1,0,0,343,
        341,1,0,0,0,343,342,1,0,0,0,344,128,1,0,0,0,345,346,2,48,57,0,346,
        130,1,0,0,0,347,348,2,48,51,0,348,132,1,0,0,0,349,350,2,48,49,0,
        350,134,1,0,0,0,351,354,3,123,61,0,352,354,3,125,62,0,353,351,1,
        0,0,0,353,352,1,0,0,0,354,136,1,0,0,0,355,358,3,135,67,0,356,358,
        3,129,64,0,357,355,1,0,0,0,357,356,1,0,0,0,358,138,1,0,0,0,10,0,
        219,258,260,268,280,282,343,353,357,0
    ]

class ZorgQueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    NL = 26
    LOWER_O = 27
    LOWER_X = 28
    DATE = 29
    TIME = 30
    CREATE_RANGE_HEAD = 31
    MODIFY_RANGE_HEAD = 32
    DATE_RANGE_TAIL = 33
    PRIORITY = 34
    ID = 35
    ZID = 36
    SHORT_DATE = 37
    NUM_ID = 38
    TWO_SPACE_DASH = 39
    FOUR_SPACE_DASH = 40
    SYMBOL = 41
    DOLLAR = 42
    HAT = 43
    DASH = 44
    DOT = 45
    FSLASH = 46
    UNDERSCORE = 47
    SPACE = 48
    LPAREN = 49
    RPAREN = 50
    HASH = 51
    AT_SIGN = 52
    PLUS = 53
    PERCENT = 54
    SQUOTE = 55
    DQUOTE = 56
    TILDE = 57
    STAR = 58
    LANGLE = 59
    RANGLE = 60
    COLON = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'S'", "'W'", "'O'", "'G'", "'note'", "'or'", "'1'", "'2'", 
            "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'!'", "'0'", 
            "'<='", "'>='", "'c'", "'create'", "'modify'", "'priority'", 
            "'file'", "'type'", "'o'", "'x'", "'  -'", "'    -'", "'$'", 
            "'^'", "'-'", "'.'", "'/'", "'_'", "' '", "'('", "')'", "'#'", 
            "'@'", "'+'", "'%'", "'''", "'\"'", "'~'", "'*'", "'<'", "'>'", 
            "':'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
            "MODIFY_RANGE_HEAD", "DATE_RANGE_TAIL", "PRIORITY", "ID", "ZID", 
            "SHORT_DATE", "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", 
            "SYMBOL", "DOLLAR", "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", 
            "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", "PERCENT", 
            "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", "RANGLE", "COLON" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "NL", "LOWER_O", 
                  "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", "MODIFY_RANGE_HEAD", 
                  "DATE_RANGE_TAIL", "PRIORITY", "ID", "ZID", "SHORT_DATE", 
                  "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", "SYMBOL", 
                  "DOLLAR", "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", 
                  "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", 
                  "PERCENT", "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", 
                  "RANGLE", "COLON", "UPPER_LETTER", "LOWER_LETTER", "ZID_CHAR", 
                  "NUM", "FIRST_D_NUM", "FIRST_M_NUM", "ALPHA", "ALPHANUM" ]

    grammarFileName = "ZorgQuery.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


