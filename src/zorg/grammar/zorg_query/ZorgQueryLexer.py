# Generated from ZorgQuery.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,297,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,3,13,161,8,
        13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,5,21,197,8,21,10,21,12,
        21,200,9,21,1,22,1,22,1,22,1,22,1,22,3,22,207,8,22,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,5,24,219,8,24,10,24,12,24,222,
        9,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
        1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,
        1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
        1,47,1,48,1,48,1,49,1,49,1,50,1,50,3,50,282,8,50,1,51,1,51,1,52,
        1,52,1,53,1,53,1,54,1,54,3,54,292,8,54,1,55,1,55,3,55,296,8,55,0,
        0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,0,99,0,101,0,103,0,105,0,107,0,109,0,111,0,1,0,
        2,9,0,33,33,38,38,44,44,59,59,61,61,63,63,91,93,96,96,123,125,6,
        0,65,72,74,78,80,90,97,105,107,107,109,122,297,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,1,113,1,0,0,0,3,115,1,0,0,0,5,117,1,0,0,0,7,119,
        1,0,0,0,9,121,1,0,0,0,11,126,1,0,0,0,13,129,1,0,0,0,15,131,1,0,0,
        0,17,133,1,0,0,0,19,135,1,0,0,0,21,140,1,0,0,0,23,149,1,0,0,0,25,
        154,1,0,0,0,27,160,1,0,0,0,29,164,1,0,0,0,31,166,1,0,0,0,33,168,
        1,0,0,0,35,179,1,0,0,0,37,184,1,0,0,0,39,187,1,0,0,0,41,190,1,0,
        0,0,43,193,1,0,0,0,45,201,1,0,0,0,47,208,1,0,0,0,49,215,1,0,0,0,
        51,223,1,0,0,0,53,227,1,0,0,0,55,233,1,0,0,0,57,235,1,0,0,0,59,237,
        1,0,0,0,61,239,1,0,0,0,63,241,1,0,0,0,65,243,1,0,0,0,67,245,1,0,
        0,0,69,247,1,0,0,0,71,249,1,0,0,0,73,251,1,0,0,0,75,253,1,0,0,0,
        77,255,1,0,0,0,79,257,1,0,0,0,81,259,1,0,0,0,83,261,1,0,0,0,85,263,
        1,0,0,0,87,265,1,0,0,0,89,267,1,0,0,0,91,269,1,0,0,0,93,271,1,0,
        0,0,95,273,1,0,0,0,97,275,1,0,0,0,99,277,1,0,0,0,101,281,1,0,0,0,
        103,283,1,0,0,0,105,285,1,0,0,0,107,287,1,0,0,0,109,291,1,0,0,0,
        111,295,1,0,0,0,113,114,5,83,0,0,114,2,1,0,0,0,115,116,5,87,0,0,
        116,4,1,0,0,0,117,118,5,79,0,0,118,6,1,0,0,0,119,120,5,71,0,0,120,
        8,1,0,0,0,121,122,5,110,0,0,122,123,5,111,0,0,123,124,5,116,0,0,
        124,125,5,101,0,0,125,10,1,0,0,0,126,127,5,111,0,0,127,128,5,114,
        0,0,128,12,1,0,0,0,129,130,5,91,0,0,130,14,1,0,0,0,131,132,5,93,
        0,0,132,16,1,0,0,0,133,134,5,33,0,0,134,18,1,0,0,0,135,136,5,100,
        0,0,136,137,5,97,0,0,137,138,5,116,0,0,138,139,5,101,0,0,139,20,
        1,0,0,0,140,141,5,112,0,0,141,142,5,114,0,0,142,143,5,105,0,0,143,
        144,5,111,0,0,144,145,5,114,0,0,145,146,5,105,0,0,146,147,5,116,
        0,0,147,148,5,121,0,0,148,22,1,0,0,0,149,150,5,102,0,0,150,151,5,
        105,0,0,151,152,5,108,0,0,152,153,5,101,0,0,153,24,1,0,0,0,154,155,
        5,116,0,0,155,156,5,121,0,0,156,157,5,112,0,0,157,158,5,101,0,0,
        158,26,1,0,0,0,159,161,5,13,0,0,160,159,1,0,0,0,160,161,1,0,0,0,
        161,162,1,0,0,0,162,163,5,10,0,0,163,28,1,0,0,0,164,165,5,111,0,
        0,165,30,1,0,0,0,166,167,5,120,0,0,167,32,1,0,0,0,168,169,5,50,0,
        0,169,170,3,103,51,0,170,171,3,103,51,0,171,172,3,103,51,0,172,173,
        3,61,30,0,173,174,3,107,53,0,174,175,3,103,51,0,175,176,3,61,30,
        0,176,177,3,105,52,0,177,178,3,103,51,0,178,34,1,0,0,0,179,180,2,
        48,50,0,180,181,3,103,51,0,181,182,2,48,53,0,182,183,3,103,51,0,
        183,36,1,0,0,0,184,185,3,59,29,0,185,186,3,47,23,0,186,38,1,0,0,
        0,187,188,3,57,28,0,188,189,3,47,23,0,189,40,1,0,0,0,190,191,3,95,
        47,0,191,192,3,47,23,0,192,42,1,0,0,0,193,198,3,111,55,0,194,197,
        3,111,55,0,195,197,3,67,33,0,196,194,1,0,0,0,196,195,1,0,0,0,197,
        200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,44,1,0,0,0,200,198,
        1,0,0,0,201,202,3,47,23,0,202,203,3,75,37,0,203,204,3,101,50,0,204,
        206,3,101,50,0,205,207,3,101,50,0,206,205,1,0,0,0,206,207,1,0,0,
        0,207,46,1,0,0,0,208,209,3,103,51,0,209,210,3,103,51,0,210,211,3,
        107,53,0,211,212,3,103,51,0,212,213,3,105,52,0,213,214,3,103,51,
        0,214,48,1,0,0,0,215,220,3,103,51,0,216,219,3,111,55,0,217,219,3,
        67,33,0,218,216,1,0,0,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,
        1,0,0,0,220,221,1,0,0,0,221,50,1,0,0,0,222,220,1,0,0,0,223,224,5,
        32,0,0,224,225,5,32,0,0,225,226,5,45,0,0,226,52,1,0,0,0,227,228,
        5,32,0,0,228,229,5,32,0,0,229,230,5,32,0,0,230,231,5,32,0,0,231,
        232,5,45,0,0,232,54,1,0,0,0,233,234,7,0,0,0,234,56,1,0,0,0,235,236,
        5,36,0,0,236,58,1,0,0,0,237,238,5,94,0,0,238,60,1,0,0,0,239,240,
        5,45,0,0,240,62,1,0,0,0,241,242,5,46,0,0,242,64,1,0,0,0,243,244,
        5,47,0,0,244,66,1,0,0,0,245,246,5,95,0,0,246,68,1,0,0,0,247,248,
        5,32,0,0,248,70,1,0,0,0,249,250,5,40,0,0,250,72,1,0,0,0,251,252,
        5,41,0,0,252,74,1,0,0,0,253,254,5,35,0,0,254,76,1,0,0,0,255,256,
        5,64,0,0,256,78,1,0,0,0,257,258,5,43,0,0,258,80,1,0,0,0,259,260,
        5,37,0,0,260,82,1,0,0,0,261,262,5,39,0,0,262,84,1,0,0,0,263,264,
        5,34,0,0,264,86,1,0,0,0,265,266,5,126,0,0,266,88,1,0,0,0,267,268,
        5,42,0,0,268,90,1,0,0,0,269,270,5,60,0,0,270,92,1,0,0,0,271,272,
        5,62,0,0,272,94,1,0,0,0,273,274,5,58,0,0,274,96,1,0,0,0,275,276,
        2,65,90,0,276,98,1,0,0,0,277,278,2,97,122,0,278,100,1,0,0,0,279,
        282,3,103,51,0,280,282,7,1,0,0,281,279,1,0,0,0,281,280,1,0,0,0,282,
        102,1,0,0,0,283,284,2,48,57,0,284,104,1,0,0,0,285,286,2,48,51,0,
        286,106,1,0,0,0,287,288,2,48,49,0,288,108,1,0,0,0,289,292,3,97,48,
        0,290,292,3,99,49,0,291,289,1,0,0,0,291,290,1,0,0,0,292,110,1,0,
        0,0,293,296,3,109,54,0,294,296,3,103,51,0,295,293,1,0,0,0,295,294,
        1,0,0,0,296,112,1,0,0,0,10,0,160,196,198,206,218,220,281,291,295,
        0
    ]

class ZorgQueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    NL = 14
    LOWER_O = 15
    LOWER_X = 16
    DATE = 17
    TIME = 18
    CREATE_RANGE_HEAD = 19
    MODIFY_RANGE_HEAD = 20
    DATE_RANGE_TAIL = 21
    ID = 22
    ZID = 23
    SHORT_DATE = 24
    NUM_ID = 25
    TWO_SPACE_DASH = 26
    FOUR_SPACE_DASH = 27
    SYMBOL = 28
    DOLLAR = 29
    HAT = 30
    DASH = 31
    DOT = 32
    FSLASH = 33
    UNDERSCORE = 34
    SPACE = 35
    LPAREN = 36
    RPAREN = 37
    HASH = 38
    AT_SIGN = 39
    PLUS = 40
    PERCENT = 41
    SQUOTE = 42
    DQUOTE = 43
    TILDE = 44
    STAR = 45
    LANGLE = 46
    RANGLE = 47
    COLON = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'S'", "'W'", "'O'", "'G'", "'note'", "'or'", "'['", "']'", 
            "'!'", "'date'", "'priority'", "'file'", "'type'", "'o'", "'x'", 
            "'  -'", "'    -'", "'$'", "'^'", "'-'", "'.'", "'/'", "'_'", 
            "' '", "'('", "')'", "'#'", "'@'", "'+'", "'%'", "'''", "'\"'", 
            "'~'", "'*'", "'<'", "'>'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
            "MODIFY_RANGE_HEAD", "DATE_RANGE_TAIL", "ID", "ZID", "SHORT_DATE", 
            "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", "SYMBOL", "DOLLAR", 
            "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", "SPACE", "LPAREN", 
            "RPAREN", "HASH", "AT_SIGN", "PLUS", "PERCENT", "SQUOTE", "DQUOTE", 
            "TILDE", "STAR", "LANGLE", "RANGLE", "COLON" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "NL", 
                  "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
                  "MODIFY_RANGE_HEAD", "DATE_RANGE_TAIL", "ID", "ZID", "SHORT_DATE", 
                  "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", "SYMBOL", 
                  "DOLLAR", "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", 
                  "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", 
                  "PERCENT", "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", 
                  "RANGLE", "COLON", "UPPER_LETTER", "LOWER_LETTER", "ZID_CHAR", 
                  "NUM", "FIRST_D_NUM", "FIRST_M_NUM", "ALPHA", "ALPHANUM" ]

    grammarFileName = "ZorgQuery.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


