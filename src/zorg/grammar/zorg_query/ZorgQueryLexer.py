# Generated from ZorgQuery.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,288,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,12,1,12,1,12,1,12,1,12,1,13,3,13,157,8,13,1,13,1,13,1,14,1,
        14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,
        20,1,20,5,20,190,8,20,10,20,12,20,193,9,20,1,21,1,21,1,21,1,21,1,
        21,3,21,200,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
        23,5,23,212,8,23,10,23,12,23,215,9,23,1,24,1,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
        30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,
        36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,
        43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,3,48,273,
        8,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,3,52,283,8,52,1,53,
        1,53,3,53,287,8,53,0,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,0,95,0,97,0,99,0,101,0,103,0,105,0,
        107,0,1,0,2,10,0,33,33,36,36,38,38,44,44,59,59,61,61,63,63,91,93,
        96,96,123,125,6,0,65,72,74,78,80,90,97,105,107,107,109,122,288,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
        0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
        0,0,0,1,109,1,0,0,0,3,111,1,0,0,0,5,113,1,0,0,0,7,115,1,0,0,0,9,
        117,1,0,0,0,11,122,1,0,0,0,13,125,1,0,0,0,15,127,1,0,0,0,17,129,
        1,0,0,0,19,131,1,0,0,0,21,136,1,0,0,0,23,145,1,0,0,0,25,150,1,0,
        0,0,27,156,1,0,0,0,29,160,1,0,0,0,31,162,1,0,0,0,33,164,1,0,0,0,
        35,175,1,0,0,0,37,180,1,0,0,0,39,183,1,0,0,0,41,186,1,0,0,0,43,194,
        1,0,0,0,45,201,1,0,0,0,47,208,1,0,0,0,49,216,1,0,0,0,51,220,1,0,
        0,0,53,226,1,0,0,0,55,228,1,0,0,0,57,230,1,0,0,0,59,232,1,0,0,0,
        61,234,1,0,0,0,63,236,1,0,0,0,65,238,1,0,0,0,67,240,1,0,0,0,69,242,
        1,0,0,0,71,244,1,0,0,0,73,246,1,0,0,0,75,248,1,0,0,0,77,250,1,0,
        0,0,79,252,1,0,0,0,81,254,1,0,0,0,83,256,1,0,0,0,85,258,1,0,0,0,
        87,260,1,0,0,0,89,262,1,0,0,0,91,264,1,0,0,0,93,266,1,0,0,0,95,268,
        1,0,0,0,97,272,1,0,0,0,99,274,1,0,0,0,101,276,1,0,0,0,103,278,1,
        0,0,0,105,282,1,0,0,0,107,286,1,0,0,0,109,110,5,83,0,0,110,2,1,0,
        0,0,111,112,5,87,0,0,112,4,1,0,0,0,113,114,5,79,0,0,114,6,1,0,0,
        0,115,116,5,71,0,0,116,8,1,0,0,0,117,118,5,110,0,0,118,119,5,111,
        0,0,119,120,5,116,0,0,120,121,5,101,0,0,121,10,1,0,0,0,122,123,5,
        111,0,0,123,124,5,114,0,0,124,12,1,0,0,0,125,126,5,91,0,0,126,14,
        1,0,0,0,127,128,5,93,0,0,128,16,1,0,0,0,129,130,5,33,0,0,130,18,
        1,0,0,0,131,132,5,100,0,0,132,133,5,97,0,0,133,134,5,116,0,0,134,
        135,5,101,0,0,135,20,1,0,0,0,136,137,5,112,0,0,137,138,5,114,0,0,
        138,139,5,105,0,0,139,140,5,111,0,0,140,141,5,114,0,0,141,142,5,
        105,0,0,142,143,5,116,0,0,143,144,5,121,0,0,144,22,1,0,0,0,145,146,
        5,102,0,0,146,147,5,105,0,0,147,148,5,108,0,0,148,149,5,101,0,0,
        149,24,1,0,0,0,150,151,5,116,0,0,151,152,5,121,0,0,152,153,5,112,
        0,0,153,154,5,101,0,0,154,26,1,0,0,0,155,157,5,13,0,0,156,155,1,
        0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,159,5,10,0,0,159,28,1,
        0,0,0,160,161,5,111,0,0,161,30,1,0,0,0,162,163,5,120,0,0,163,32,
        1,0,0,0,164,165,5,50,0,0,165,166,3,99,49,0,166,167,3,99,49,0,167,
        168,3,99,49,0,168,169,3,57,28,0,169,170,3,103,51,0,170,171,3,99,
        49,0,171,172,3,57,28,0,172,173,3,101,50,0,173,174,3,99,49,0,174,
        34,1,0,0,0,175,176,2,48,50,0,176,177,3,99,49,0,177,178,2,48,53,0,
        178,179,3,99,49,0,179,36,1,0,0,0,180,181,3,55,27,0,181,182,3,45,
        22,0,182,38,1,0,0,0,183,184,3,91,45,0,184,185,3,45,22,0,185,40,1,
        0,0,0,186,191,3,107,53,0,187,190,3,107,53,0,188,190,3,63,31,0,189,
        187,1,0,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,
        192,1,0,0,0,192,42,1,0,0,0,193,191,1,0,0,0,194,195,3,45,22,0,195,
        196,3,71,35,0,196,197,3,97,48,0,197,199,3,97,48,0,198,200,3,97,48,
        0,199,198,1,0,0,0,199,200,1,0,0,0,200,44,1,0,0,0,201,202,3,99,49,
        0,202,203,3,99,49,0,203,204,3,103,51,0,204,205,3,99,49,0,205,206,
        3,101,50,0,206,207,3,99,49,0,207,46,1,0,0,0,208,213,3,99,49,0,209,
        212,3,107,53,0,210,212,3,63,31,0,211,209,1,0,0,0,211,210,1,0,0,0,
        212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,48,1,0,0,0,215,
        213,1,0,0,0,216,217,5,32,0,0,217,218,5,32,0,0,218,219,5,45,0,0,219,
        50,1,0,0,0,220,221,5,32,0,0,221,222,5,32,0,0,222,223,5,32,0,0,223,
        224,5,32,0,0,224,225,5,45,0,0,225,52,1,0,0,0,226,227,7,0,0,0,227,
        54,1,0,0,0,228,229,5,94,0,0,229,56,1,0,0,0,230,231,5,45,0,0,231,
        58,1,0,0,0,232,233,5,46,0,0,233,60,1,0,0,0,234,235,5,47,0,0,235,
        62,1,0,0,0,236,237,5,95,0,0,237,64,1,0,0,0,238,239,5,32,0,0,239,
        66,1,0,0,0,240,241,5,40,0,0,241,68,1,0,0,0,242,243,5,41,0,0,243,
        70,1,0,0,0,244,245,5,35,0,0,245,72,1,0,0,0,246,247,5,64,0,0,247,
        74,1,0,0,0,248,249,5,43,0,0,249,76,1,0,0,0,250,251,5,37,0,0,251,
        78,1,0,0,0,252,253,5,39,0,0,253,80,1,0,0,0,254,255,5,34,0,0,255,
        82,1,0,0,0,256,257,5,126,0,0,257,84,1,0,0,0,258,259,5,42,0,0,259,
        86,1,0,0,0,260,261,5,60,0,0,261,88,1,0,0,0,262,263,5,62,0,0,263,
        90,1,0,0,0,264,265,5,58,0,0,265,92,1,0,0,0,266,267,2,65,90,0,267,
        94,1,0,0,0,268,269,2,97,122,0,269,96,1,0,0,0,270,273,3,99,49,0,271,
        273,7,1,0,0,272,270,1,0,0,0,272,271,1,0,0,0,273,98,1,0,0,0,274,275,
        2,48,57,0,275,100,1,0,0,0,276,277,2,48,51,0,277,102,1,0,0,0,278,
        279,2,48,49,0,279,104,1,0,0,0,280,283,3,93,46,0,281,283,3,95,47,
        0,282,280,1,0,0,0,282,281,1,0,0,0,283,106,1,0,0,0,284,287,3,105,
        52,0,285,287,3,99,49,0,286,284,1,0,0,0,286,285,1,0,0,0,287,108,1,
        0,0,0,10,0,156,189,191,199,211,213,272,282,286,0
    ]

class ZorgQueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    NL = 14
    LOWER_O = 15
    LOWER_X = 16
    DATE = 17
    TIME = 18
    CREATE_RANGE_HEAD = 19
    DATE_RANGE_TAIL = 20
    ID = 21
    ZID = 22
    SHORT_DATE = 23
    NUM_ID = 24
    TWO_SPACE_DASH = 25
    FOUR_SPACE_DASH = 26
    SYMBOL = 27
    HAT = 28
    DASH = 29
    DOT = 30
    FSLASH = 31
    UNDERSCORE = 32
    SPACE = 33
    LPAREN = 34
    RPAREN = 35
    HASH = 36
    AT_SIGN = 37
    PLUS = 38
    PERCENT = 39
    SQUOTE = 40
    DQUOTE = 41
    TILDE = 42
    STAR = 43
    LANGLE = 44
    RANGLE = 45
    COLON = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'S'", "'W'", "'O'", "'G'", "'note'", "'or'", "'['", "']'", 
            "'!'", "'date'", "'priority'", "'file'", "'type'", "'o'", "'x'", 
            "'  -'", "'    -'", "'^'", "'-'", "'.'", "'/'", "'_'", "' '", 
            "'('", "')'", "'#'", "'@'", "'+'", "'%'", "'''", "'\"'", "'~'", 
            "'*'", "'<'", "'>'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
            "DATE_RANGE_TAIL", "ID", "ZID", "SHORT_DATE", "NUM_ID", "TWO_SPACE_DASH", 
            "FOUR_SPACE_DASH", "SYMBOL", "HAT", "DASH", "DOT", "FSLASH", 
            "UNDERSCORE", "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", 
            "PLUS", "PERCENT", "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", 
            "RANGLE", "COLON" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "NL", 
                  "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
                  "DATE_RANGE_TAIL", "ID", "ZID", "SHORT_DATE", "NUM_ID", 
                  "TWO_SPACE_DASH", "FOUR_SPACE_DASH", "SYMBOL", "HAT", 
                  "DASH", "DOT", "FSLASH", "UNDERSCORE", "SPACE", "LPAREN", 
                  "RPAREN", "HASH", "AT_SIGN", "PLUS", "PERCENT", "SQUOTE", 
                  "DQUOTE", "TILDE", "STAR", "LANGLE", "RANGLE", "COLON", 
                  "UPPER_LETTER", "LOWER_LETTER", "ZID_CHAR", "NUM", "FIRST_D_NUM", 
                  "FIRST_M_NUM", "ALPHA", "ALPHANUM" ]

    grammarFileName = "ZorgQuery.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


