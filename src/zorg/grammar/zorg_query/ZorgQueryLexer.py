# Generated from ZorgQuery.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,59,351,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,
        1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,3,23,212,8,23,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
        1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,5,32,251,
        8,32,10,32,12,32,254,9,32,1,33,1,33,1,33,1,33,1,33,3,33,261,8,33,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,5,35,273,8,35,
        10,35,12,35,276,9,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
        1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
        1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,
        1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,
        1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,3,61,336,8,61,
        1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,3,65,346,8,65,1,66,1,66,
        3,66,350,8,66,0,0,67,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
        107,54,109,55,111,56,113,57,115,58,117,59,119,0,121,0,123,0,125,
        0,127,0,129,0,131,0,133,0,1,0,2,9,0,33,33,38,38,44,44,59,59,61,61,
        63,63,91,93,96,96,123,125,6,0,65,72,74,78,80,90,97,105,107,107,109,
        122,351,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
        0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,
        0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
        0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
        1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,
        1,135,1,0,0,0,3,137,1,0,0,0,5,139,1,0,0,0,7,141,1,0,0,0,9,143,1,
        0,0,0,11,148,1,0,0,0,13,151,1,0,0,0,15,153,1,0,0,0,17,155,1,0,0,
        0,19,157,1,0,0,0,21,159,1,0,0,0,23,161,1,0,0,0,25,163,1,0,0,0,27,
        165,1,0,0,0,29,167,1,0,0,0,31,169,1,0,0,0,33,171,1,0,0,0,35,174,
        1,0,0,0,37,177,1,0,0,0,39,184,1,0,0,0,41,191,1,0,0,0,43,200,1,0,
        0,0,45,205,1,0,0,0,47,211,1,0,0,0,49,215,1,0,0,0,51,217,1,0,0,0,
        53,219,1,0,0,0,55,230,1,0,0,0,57,235,1,0,0,0,59,238,1,0,0,0,61,241,
        1,0,0,0,63,244,1,0,0,0,65,247,1,0,0,0,67,255,1,0,0,0,69,262,1,0,
        0,0,71,269,1,0,0,0,73,277,1,0,0,0,75,281,1,0,0,0,77,287,1,0,0,0,
        79,289,1,0,0,0,81,291,1,0,0,0,83,293,1,0,0,0,85,295,1,0,0,0,87,297,
        1,0,0,0,89,299,1,0,0,0,91,301,1,0,0,0,93,303,1,0,0,0,95,305,1,0,
        0,0,97,307,1,0,0,0,99,309,1,0,0,0,101,311,1,0,0,0,103,313,1,0,0,
        0,105,315,1,0,0,0,107,317,1,0,0,0,109,319,1,0,0,0,111,321,1,0,0,
        0,113,323,1,0,0,0,115,325,1,0,0,0,117,327,1,0,0,0,119,329,1,0,0,
        0,121,331,1,0,0,0,123,335,1,0,0,0,125,337,1,0,0,0,127,339,1,0,0,
        0,129,341,1,0,0,0,131,345,1,0,0,0,133,349,1,0,0,0,135,136,5,83,0,
        0,136,2,1,0,0,0,137,138,5,87,0,0,138,4,1,0,0,0,139,140,5,79,0,0,
        140,6,1,0,0,0,141,142,5,71,0,0,142,8,1,0,0,0,143,144,5,110,0,0,144,
        145,5,111,0,0,145,146,5,116,0,0,146,147,5,101,0,0,147,10,1,0,0,0,
        148,149,5,111,0,0,149,150,5,114,0,0,150,12,1,0,0,0,151,152,5,49,
        0,0,152,14,1,0,0,0,153,154,5,50,0,0,154,16,1,0,0,0,155,156,5,51,
        0,0,156,18,1,0,0,0,157,158,5,52,0,0,158,20,1,0,0,0,159,160,5,53,
        0,0,160,22,1,0,0,0,161,162,5,54,0,0,162,24,1,0,0,0,163,164,5,55,
        0,0,164,26,1,0,0,0,165,166,5,56,0,0,166,28,1,0,0,0,167,168,5,57,
        0,0,168,30,1,0,0,0,169,170,5,33,0,0,170,32,1,0,0,0,171,172,5,60,
        0,0,172,173,5,61,0,0,173,34,1,0,0,0,174,175,5,62,0,0,175,176,5,61,
        0,0,176,36,1,0,0,0,177,178,5,99,0,0,178,179,5,114,0,0,179,180,5,
        101,0,0,180,181,5,97,0,0,181,182,5,116,0,0,182,183,5,101,0,0,183,
        38,1,0,0,0,184,185,5,109,0,0,185,186,5,111,0,0,186,187,5,100,0,0,
        187,188,5,105,0,0,188,189,5,102,0,0,189,190,5,121,0,0,190,40,1,0,
        0,0,191,192,5,112,0,0,192,193,5,114,0,0,193,194,5,105,0,0,194,195,
        5,111,0,0,195,196,5,114,0,0,196,197,5,105,0,0,197,198,5,116,0,0,
        198,199,5,121,0,0,199,42,1,0,0,0,200,201,5,102,0,0,201,202,5,105,
        0,0,202,203,5,108,0,0,203,204,5,101,0,0,204,44,1,0,0,0,205,206,5,
        116,0,0,206,207,5,121,0,0,207,208,5,112,0,0,208,209,5,101,0,0,209,
        46,1,0,0,0,210,212,5,13,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,
        213,1,0,0,0,213,214,5,10,0,0,214,48,1,0,0,0,215,216,5,111,0,0,216,
        50,1,0,0,0,217,218,5,120,0,0,218,52,1,0,0,0,219,220,5,50,0,0,220,
        221,3,125,62,0,221,222,3,125,62,0,222,223,3,125,62,0,223,224,3,83,
        41,0,224,225,3,129,64,0,225,226,3,125,62,0,226,227,3,83,41,0,227,
        228,3,127,63,0,228,229,3,125,62,0,229,54,1,0,0,0,230,231,2,48,50,
        0,231,232,3,125,62,0,232,233,2,48,53,0,233,234,3,125,62,0,234,56,
        1,0,0,0,235,236,3,81,40,0,236,237,3,69,34,0,237,58,1,0,0,0,238,239,
        3,79,39,0,239,240,3,69,34,0,240,60,1,0,0,0,241,242,3,117,58,0,242,
        243,3,69,34,0,243,62,1,0,0,0,244,245,5,80,0,0,245,246,3,125,62,0,
        246,64,1,0,0,0,247,252,3,133,66,0,248,251,3,133,66,0,249,251,3,89,
        44,0,250,248,1,0,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,
        0,0,252,253,1,0,0,0,253,66,1,0,0,0,254,252,1,0,0,0,255,256,3,69,
        34,0,256,257,3,97,48,0,257,258,3,123,61,0,258,260,3,123,61,0,259,
        261,3,123,61,0,260,259,1,0,0,0,260,261,1,0,0,0,261,68,1,0,0,0,262,
        263,3,125,62,0,263,264,3,125,62,0,264,265,3,129,64,0,265,266,3,125,
        62,0,266,267,3,127,63,0,267,268,3,125,62,0,268,70,1,0,0,0,269,274,
        3,125,62,0,270,273,3,133,66,0,271,273,3,89,44,0,272,270,1,0,0,0,
        272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,
        275,72,1,0,0,0,276,274,1,0,0,0,277,278,5,32,0,0,278,279,5,32,0,0,
        279,280,5,45,0,0,280,74,1,0,0,0,281,282,5,32,0,0,282,283,5,32,0,
        0,283,284,5,32,0,0,284,285,5,32,0,0,285,286,5,45,0,0,286,76,1,0,
        0,0,287,288,7,0,0,0,288,78,1,0,0,0,289,290,5,36,0,0,290,80,1,0,0,
        0,291,292,5,94,0,0,292,82,1,0,0,0,293,294,5,45,0,0,294,84,1,0,0,
        0,295,296,5,46,0,0,296,86,1,0,0,0,297,298,5,47,0,0,298,88,1,0,0,
        0,299,300,5,95,0,0,300,90,1,0,0,0,301,302,5,32,0,0,302,92,1,0,0,
        0,303,304,5,40,0,0,304,94,1,0,0,0,305,306,5,41,0,0,306,96,1,0,0,
        0,307,308,5,35,0,0,308,98,1,0,0,0,309,310,5,64,0,0,310,100,1,0,0,
        0,311,312,5,43,0,0,312,102,1,0,0,0,313,314,5,37,0,0,314,104,1,0,
        0,0,315,316,5,39,0,0,316,106,1,0,0,0,317,318,5,34,0,0,318,108,1,
        0,0,0,319,320,5,126,0,0,320,110,1,0,0,0,321,322,5,42,0,0,322,112,
        1,0,0,0,323,324,5,60,0,0,324,114,1,0,0,0,325,326,5,62,0,0,326,116,
        1,0,0,0,327,328,5,58,0,0,328,118,1,0,0,0,329,330,2,65,90,0,330,120,
        1,0,0,0,331,332,2,97,122,0,332,122,1,0,0,0,333,336,3,125,62,0,334,
        336,7,1,0,0,335,333,1,0,0,0,335,334,1,0,0,0,336,124,1,0,0,0,337,
        338,2,48,57,0,338,126,1,0,0,0,339,340,2,48,51,0,340,128,1,0,0,0,
        341,342,2,48,49,0,342,130,1,0,0,0,343,346,3,119,59,0,344,346,3,121,
        60,0,345,343,1,0,0,0,345,344,1,0,0,0,346,132,1,0,0,0,347,350,3,131,
        65,0,348,350,3,125,62,0,349,347,1,0,0,0,349,348,1,0,0,0,350,134,
        1,0,0,0,10,0,211,250,252,260,272,274,335,345,349,0
    ]

class ZorgQueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    NL = 24
    LOWER_O = 25
    LOWER_X = 26
    DATE = 27
    TIME = 28
    CREATE_RANGE_HEAD = 29
    MODIFY_RANGE_HEAD = 30
    DATE_RANGE_TAIL = 31
    PRIORITY = 32
    ID = 33
    ZID = 34
    SHORT_DATE = 35
    NUM_ID = 36
    TWO_SPACE_DASH = 37
    FOUR_SPACE_DASH = 38
    SYMBOL = 39
    DOLLAR = 40
    HAT = 41
    DASH = 42
    DOT = 43
    FSLASH = 44
    UNDERSCORE = 45
    SPACE = 46
    LPAREN = 47
    RPAREN = 48
    HASH = 49
    AT_SIGN = 50
    PLUS = 51
    PERCENT = 52
    SQUOTE = 53
    DQUOTE = 54
    TILDE = 55
    STAR = 56
    LANGLE = 57
    RANGLE = 58
    COLON = 59

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'S'", "'W'", "'O'", "'G'", "'note'", "'or'", "'1'", "'2'", 
            "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'!'", "'<='", 
            "'>='", "'create'", "'modify'", "'priority'", "'file'", "'type'", 
            "'o'", "'x'", "'  -'", "'    -'", "'$'", "'^'", "'-'", "'.'", 
            "'/'", "'_'", "' '", "'('", "')'", "'#'", "'@'", "'+'", "'%'", 
            "'''", "'\"'", "'~'", "'*'", "'<'", "'>'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
            "MODIFY_RANGE_HEAD", "DATE_RANGE_TAIL", "PRIORITY", "ID", "ZID", 
            "SHORT_DATE", "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", 
            "SYMBOL", "DOLLAR", "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", 
            "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", "PERCENT", 
            "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", "RANGLE", "COLON" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "NL", "LOWER_O", "LOWER_X", 
                  "DATE", "TIME", "CREATE_RANGE_HEAD", "MODIFY_RANGE_HEAD", 
                  "DATE_RANGE_TAIL", "PRIORITY", "ID", "ZID", "SHORT_DATE", 
                  "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", "SYMBOL", 
                  "DOLLAR", "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", 
                  "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", 
                  "PERCENT", "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", 
                  "RANGLE", "COLON", "UPPER_LETTER", "LOWER_LETTER", "ZID_CHAR", 
                  "NUM", "FIRST_D_NUM", "FIRST_M_NUM", "ALPHA", "ALPHANUM" ]

    grammarFileName = "ZorgQuery.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


