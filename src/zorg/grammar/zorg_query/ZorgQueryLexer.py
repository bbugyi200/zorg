# Generated from ZorgQuery.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,240,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,3,9,119,8,9,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,5,14,146,8,14,10,14,12,
        14,149,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,
        15,161,8,15,1,16,1,16,1,16,5,16,166,8,16,10,16,12,16,169,9,16,1,
        17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,
        20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
        33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,
        40,1,40,3,40,225,8,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,3,
        44,235,8,44,1,45,1,45,3,45,239,8,45,0,0,46,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,
        79,0,81,0,83,0,85,0,87,0,89,0,91,0,1,0,2,10,0,33,33,36,36,38,38,
        44,44,59,59,61,61,63,63,91,94,96,96,123,125,6,0,65,72,74,78,80,90,
        97,105,107,107,109,122,240,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,93,
        1,0,0,0,3,95,1,0,0,0,5,97,1,0,0,0,7,99,1,0,0,0,9,101,1,0,0,0,11,
        106,1,0,0,0,13,111,1,0,0,0,15,113,1,0,0,0,17,115,1,0,0,0,19,118,
        1,0,0,0,21,122,1,0,0,0,23,124,1,0,0,0,25,126,1,0,0,0,27,137,1,0,
        0,0,29,142,1,0,0,0,31,150,1,0,0,0,33,162,1,0,0,0,35,170,1,0,0,0,
        37,174,1,0,0,0,39,180,1,0,0,0,41,182,1,0,0,0,43,184,1,0,0,0,45,186,
        1,0,0,0,47,188,1,0,0,0,49,190,1,0,0,0,51,192,1,0,0,0,53,194,1,0,
        0,0,55,196,1,0,0,0,57,198,1,0,0,0,59,200,1,0,0,0,61,202,1,0,0,0,
        63,204,1,0,0,0,65,206,1,0,0,0,67,208,1,0,0,0,69,210,1,0,0,0,71,212,
        1,0,0,0,73,214,1,0,0,0,75,216,1,0,0,0,77,218,1,0,0,0,79,220,1,0,
        0,0,81,224,1,0,0,0,83,226,1,0,0,0,85,228,1,0,0,0,87,230,1,0,0,0,
        89,234,1,0,0,0,91,238,1,0,0,0,93,94,5,83,0,0,94,2,1,0,0,0,95,96,
        5,87,0,0,96,4,1,0,0,0,97,98,5,79,0,0,98,6,1,0,0,0,99,100,5,71,0,
        0,100,8,1,0,0,0,101,102,5,102,0,0,102,103,5,105,0,0,103,104,5,108,
        0,0,104,105,5,101,0,0,105,10,1,0,0,0,106,107,5,110,0,0,107,108,5,
        111,0,0,108,109,5,116,0,0,109,110,5,101,0,0,110,12,1,0,0,0,111,112,
        5,91,0,0,112,14,1,0,0,0,113,114,5,44,0,0,114,16,1,0,0,0,115,116,
        5,93,0,0,116,18,1,0,0,0,117,119,5,13,0,0,118,117,1,0,0,0,118,119,
        1,0,0,0,119,120,1,0,0,0,120,121,5,10,0,0,121,20,1,0,0,0,122,123,
        5,111,0,0,123,22,1,0,0,0,124,125,5,120,0,0,125,24,1,0,0,0,126,127,
        5,50,0,0,127,128,3,83,41,0,128,129,3,83,41,0,129,130,3,83,41,0,130,
        131,3,41,20,0,131,132,3,87,43,0,132,133,3,83,41,0,133,134,3,41,20,
        0,134,135,3,85,42,0,135,136,3,83,41,0,136,26,1,0,0,0,137,138,2,48,
        50,0,138,139,3,83,41,0,139,140,2,48,53,0,140,141,3,83,41,0,141,28,
        1,0,0,0,142,147,3,91,45,0,143,146,3,91,45,0,144,146,3,47,23,0,145,
        143,1,0,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,
        148,1,0,0,0,148,30,1,0,0,0,149,147,1,0,0,0,150,151,3,83,41,0,151,
        152,3,83,41,0,152,153,3,87,43,0,153,154,3,83,41,0,154,155,3,85,42,
        0,155,156,3,83,41,0,156,157,3,57,28,0,157,158,3,81,40,0,158,160,
        3,81,40,0,159,161,3,81,40,0,160,159,1,0,0,0,160,161,1,0,0,0,161,
        32,1,0,0,0,162,167,3,83,41,0,163,166,3,91,45,0,164,166,3,47,23,0,
        165,163,1,0,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,
        167,168,1,0,0,0,168,34,1,0,0,0,169,167,1,0,0,0,170,171,5,32,0,0,
        171,172,5,32,0,0,172,173,5,45,0,0,173,36,1,0,0,0,174,175,5,32,0,
        0,175,176,5,32,0,0,176,177,5,32,0,0,177,178,5,32,0,0,178,179,5,45,
        0,0,179,38,1,0,0,0,180,181,7,0,0,0,181,40,1,0,0,0,182,183,5,45,0,
        0,183,42,1,0,0,0,184,185,5,46,0,0,185,44,1,0,0,0,186,187,5,47,0,
        0,187,46,1,0,0,0,188,189,5,95,0,0,189,48,1,0,0,0,190,191,5,58,0,
        0,191,50,1,0,0,0,192,193,5,32,0,0,193,52,1,0,0,0,194,195,5,40,0,
        0,195,54,1,0,0,0,196,197,5,41,0,0,197,56,1,0,0,0,198,199,5,35,0,
        0,199,58,1,0,0,0,200,201,5,64,0,0,201,60,1,0,0,0,202,203,5,43,0,
        0,203,62,1,0,0,0,204,205,5,37,0,0,205,64,1,0,0,0,206,207,5,39,0,
        0,207,66,1,0,0,0,208,209,5,34,0,0,209,68,1,0,0,0,210,211,5,126,0,
        0,211,70,1,0,0,0,212,213,5,42,0,0,213,72,1,0,0,0,214,215,5,60,0,
        0,215,74,1,0,0,0,216,217,5,62,0,0,217,76,1,0,0,0,218,219,2,65,90,
        0,219,78,1,0,0,0,220,221,2,97,122,0,221,80,1,0,0,0,222,225,3,83,
        41,0,223,225,7,1,0,0,224,222,1,0,0,0,224,223,1,0,0,0,225,82,1,0,
        0,0,226,227,2,48,57,0,227,84,1,0,0,0,228,229,2,48,51,0,229,86,1,
        0,0,0,230,231,2,48,49,0,231,88,1,0,0,0,232,235,3,77,38,0,233,235,
        3,79,39,0,234,232,1,0,0,0,234,233,1,0,0,0,235,90,1,0,0,0,236,239,
        3,89,44,0,237,239,3,83,41,0,238,236,1,0,0,0,238,237,1,0,0,0,239,
        92,1,0,0,0,10,0,118,145,147,160,165,167,224,234,238,0
    ]

class ZorgQueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    NL = 10
    LOWER_O = 11
    LOWER_X = 12
    DATE = 13
    TIME = 14
    ID = 15
    ZID = 16
    NUM_ID = 17
    TWO_SPACE_DASH = 18
    FOUR_SPACE_DASH = 19
    SYMBOL = 20
    DASH = 21
    DOT = 22
    FSLASH = 23
    UNDERSCORE = 24
    COLON = 25
    SPACE = 26
    LPAREN = 27
    RPAREN = 28
    HASH = 29
    AT_SIGN = 30
    PLUS = 31
    PERCENT = 32
    SQUOTE = 33
    DQUOTE = 34
    TILDE = 35
    STAR = 36
    LANGLE = 37
    RANGLE = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'S'", "'W'", "'O'", "'G'", "'file'", "'note'", "'['", "','", 
            "']'", "'o'", "'x'", "'  -'", "'    -'", "'-'", "'.'", "'/'", 
            "'_'", "':'", "' '", "'('", "')'", "'#'", "'@'", "'+'", "'%'", 
            "'''", "'\"'", "'~'", "'*'", "'<'", "'>'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "ID", "ZID", "NUM_ID", 
            "TWO_SPACE_DASH", "FOUR_SPACE_DASH", "SYMBOL", "DASH", "DOT", 
            "FSLASH", "UNDERSCORE", "COLON", "SPACE", "LPAREN", "RPAREN", 
            "HASH", "AT_SIGN", "PLUS", "PERCENT", "SQUOTE", "DQUOTE", "TILDE", 
            "STAR", "LANGLE", "RANGLE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", 
                  "ID", "ZID", "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", 
                  "SYMBOL", "DASH", "DOT", "FSLASH", "UNDERSCORE", "COLON", 
                  "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", 
                  "PERCENT", "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", 
                  "RANGLE", "UPPER_LETTER", "LOWER_LETTER", "ZID_CHAR", 
                  "NUM", "FIRST_D_NUM", "FIRST_M_NUM", "ALPHA", "ALPHANUM" ]

    grammarFileName = "ZorgQuery.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


