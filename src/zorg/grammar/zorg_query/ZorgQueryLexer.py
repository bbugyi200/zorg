# Generated from ZorgQuery.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,3,6,107,8,6,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,5,11,134,8,11,10,11,12,
        11,137,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,
        12,149,8,12,1,13,1,13,1,13,5,13,154,8,13,10,13,12,13,157,9,13,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,
        37,1,37,3,37,213,8,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,3,
        41,223,8,41,1,42,1,42,3,42,227,8,42,0,0,43,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,0,73,0,75,0,77,0,79,
        0,81,0,83,0,85,0,1,0,2,10,0,33,33,36,36,38,38,44,44,59,59,61,61,
        63,63,91,94,96,96,123,125,6,0,65,72,74,78,80,90,97,105,107,107,109,
        122,228,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,1,87,1,0,0,0,3,89,1,0,0,0,5,91,1,0,0,0,7,93,1,0,0,0,9,95,1,0,
        0,0,11,100,1,0,0,0,13,106,1,0,0,0,15,110,1,0,0,0,17,112,1,0,0,0,
        19,114,1,0,0,0,21,125,1,0,0,0,23,130,1,0,0,0,25,138,1,0,0,0,27,150,
        1,0,0,0,29,158,1,0,0,0,31,162,1,0,0,0,33,168,1,0,0,0,35,170,1,0,
        0,0,37,172,1,0,0,0,39,174,1,0,0,0,41,176,1,0,0,0,43,178,1,0,0,0,
        45,180,1,0,0,0,47,182,1,0,0,0,49,184,1,0,0,0,51,186,1,0,0,0,53,188,
        1,0,0,0,55,190,1,0,0,0,57,192,1,0,0,0,59,194,1,0,0,0,61,196,1,0,
        0,0,63,198,1,0,0,0,65,200,1,0,0,0,67,202,1,0,0,0,69,204,1,0,0,0,
        71,206,1,0,0,0,73,208,1,0,0,0,75,212,1,0,0,0,77,214,1,0,0,0,79,216,
        1,0,0,0,81,218,1,0,0,0,83,222,1,0,0,0,85,226,1,0,0,0,87,88,5,83,
        0,0,88,2,1,0,0,0,89,90,5,87,0,0,90,4,1,0,0,0,91,92,5,79,0,0,92,6,
        1,0,0,0,93,94,5,71,0,0,94,8,1,0,0,0,95,96,5,102,0,0,96,97,5,105,
        0,0,97,98,5,108,0,0,98,99,5,101,0,0,99,10,1,0,0,0,100,101,5,110,
        0,0,101,102,5,111,0,0,102,103,5,116,0,0,103,104,5,101,0,0,104,12,
        1,0,0,0,105,107,5,13,0,0,106,105,1,0,0,0,106,107,1,0,0,0,107,108,
        1,0,0,0,108,109,5,10,0,0,109,14,1,0,0,0,110,111,5,111,0,0,111,16,
        1,0,0,0,112,113,5,120,0,0,113,18,1,0,0,0,114,115,5,50,0,0,115,116,
        3,77,38,0,116,117,3,77,38,0,117,118,3,77,38,0,118,119,3,35,17,0,
        119,120,3,81,40,0,120,121,3,77,38,0,121,122,3,35,17,0,122,123,3,
        79,39,0,123,124,3,77,38,0,124,20,1,0,0,0,125,126,2,48,50,0,126,127,
        3,77,38,0,127,128,2,48,53,0,128,129,3,77,38,0,129,22,1,0,0,0,130,
        135,3,85,42,0,131,134,3,85,42,0,132,134,3,41,20,0,133,131,1,0,0,
        0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,
        0,136,24,1,0,0,0,137,135,1,0,0,0,138,139,3,77,38,0,139,140,3,77,
        38,0,140,141,3,81,40,0,141,142,3,77,38,0,142,143,3,79,39,0,143,144,
        3,77,38,0,144,145,3,51,25,0,145,146,3,75,37,0,146,148,3,75,37,0,
        147,149,3,75,37,0,148,147,1,0,0,0,148,149,1,0,0,0,149,26,1,0,0,0,
        150,155,3,77,38,0,151,154,3,85,42,0,152,154,3,41,20,0,153,151,1,
        0,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,
        0,0,0,156,28,1,0,0,0,157,155,1,0,0,0,158,159,5,32,0,0,159,160,5,
        32,0,0,160,161,5,45,0,0,161,30,1,0,0,0,162,163,5,32,0,0,163,164,
        5,32,0,0,164,165,5,32,0,0,165,166,5,32,0,0,166,167,5,45,0,0,167,
        32,1,0,0,0,168,169,7,0,0,0,169,34,1,0,0,0,170,171,5,45,0,0,171,36,
        1,0,0,0,172,173,5,46,0,0,173,38,1,0,0,0,174,175,5,47,0,0,175,40,
        1,0,0,0,176,177,5,95,0,0,177,42,1,0,0,0,178,179,5,58,0,0,179,44,
        1,0,0,0,180,181,5,32,0,0,181,46,1,0,0,0,182,183,5,40,0,0,183,48,
        1,0,0,0,184,185,5,41,0,0,185,50,1,0,0,0,186,187,5,35,0,0,187,52,
        1,0,0,0,188,189,5,64,0,0,189,54,1,0,0,0,190,191,5,43,0,0,191,56,
        1,0,0,0,192,193,5,37,0,0,193,58,1,0,0,0,194,195,5,39,0,0,195,60,
        1,0,0,0,196,197,5,34,0,0,197,62,1,0,0,0,198,199,5,126,0,0,199,64,
        1,0,0,0,200,201,5,42,0,0,201,66,1,0,0,0,202,203,5,60,0,0,203,68,
        1,0,0,0,204,205,5,62,0,0,205,70,1,0,0,0,206,207,2,65,90,0,207,72,
        1,0,0,0,208,209,2,97,122,0,209,74,1,0,0,0,210,213,3,77,38,0,211,
        213,7,1,0,0,212,210,1,0,0,0,212,211,1,0,0,0,213,76,1,0,0,0,214,215,
        2,48,57,0,215,78,1,0,0,0,216,217,2,48,51,0,217,80,1,0,0,0,218,219,
        2,48,49,0,219,82,1,0,0,0,220,223,3,71,35,0,221,223,3,73,36,0,222,
        220,1,0,0,0,222,221,1,0,0,0,223,84,1,0,0,0,224,227,3,83,41,0,225,
        227,3,77,38,0,226,224,1,0,0,0,226,225,1,0,0,0,227,86,1,0,0,0,10,
        0,106,133,135,148,153,155,212,222,226,0
    ]

class ZorgQueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    NL = 7
    LOWER_O = 8
    LOWER_X = 9
    DATE = 10
    TIME = 11
    ID = 12
    ZID = 13
    NUM_ID = 14
    TWO_SPACE_DASH = 15
    FOUR_SPACE_DASH = 16
    SYMBOL = 17
    DASH = 18
    DOT = 19
    FSLASH = 20
    UNDERSCORE = 21
    COLON = 22
    SPACE = 23
    LPAREN = 24
    RPAREN = 25
    HASH = 26
    AT_SIGN = 27
    PLUS = 28
    PERCENT = 29
    SQUOTE = 30
    DQUOTE = 31
    TILDE = 32
    STAR = 33
    LANGLE = 34
    RANGLE = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'S'", "'W'", "'O'", "'G'", "'file'", "'note'", "'o'", "'x'", 
            "'  -'", "'    -'", "'-'", "'.'", "'/'", "'_'", "':'", "' '", 
            "'('", "')'", "'#'", "'@'", "'+'", "'%'", "'''", "'\"'", "'~'", 
            "'*'", "'<'", "'>'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "ID", "ZID", "NUM_ID", 
            "TWO_SPACE_DASH", "FOUR_SPACE_DASH", "SYMBOL", "DASH", "DOT", 
            "FSLASH", "UNDERSCORE", "COLON", "SPACE", "LPAREN", "RPAREN", 
            "HASH", "AT_SIGN", "PLUS", "PERCENT", "SQUOTE", "DQUOTE", "TILDE", 
            "STAR", "LANGLE", "RANGLE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NL", 
                  "LOWER_O", "LOWER_X", "DATE", "TIME", "ID", "ZID", "NUM_ID", 
                  "TWO_SPACE_DASH", "FOUR_SPACE_DASH", "SYMBOL", "DASH", 
                  "DOT", "FSLASH", "UNDERSCORE", "COLON", "SPACE", "LPAREN", 
                  "RPAREN", "HASH", "AT_SIGN", "PLUS", "PERCENT", "SQUOTE", 
                  "DQUOTE", "TILDE", "STAR", "LANGLE", "RANGLE", "UPPER_LETTER", 
                  "LOWER_LETTER", "ZID_CHAR", "NUM", "FIRST_D_NUM", "FIRST_M_NUM", 
                  "ALPHA", "ALPHANUM" ]

    grammarFileName = "ZorgQuery.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


