# Generated from ZorgQuery.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,56,330,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,
        1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
        1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        1,19,1,20,3,20,191,8,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,
        1,29,1,29,1,29,5,29,230,8,29,10,29,12,29,233,9,29,1,30,1,30,1,30,
        1,30,1,30,3,30,240,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,
        1,32,1,32,5,32,252,8,32,10,32,12,32,255,9,32,1,33,1,33,1,33,1,33,
        1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
        1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
        1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
        1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,
        1,58,1,58,3,58,315,8,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,
        3,62,325,8,62,1,63,1,63,3,63,329,8,63,0,0,64,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
        39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
        50,101,51,103,52,105,53,107,54,109,55,111,56,113,0,115,0,117,0,119,
        0,121,0,123,0,125,0,127,0,1,0,2,9,0,33,33,38,38,44,44,59,59,61,61,
        63,63,91,93,96,96,123,125,6,0,65,72,74,78,80,90,97,105,107,107,109,
        122,330,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
        0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
        0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,
        0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
        0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
        1,0,0,0,0,111,1,0,0,0,1,129,1,0,0,0,3,131,1,0,0,0,5,133,1,0,0,0,
        7,135,1,0,0,0,9,137,1,0,0,0,11,142,1,0,0,0,13,145,1,0,0,0,15,147,
        1,0,0,0,17,149,1,0,0,0,19,151,1,0,0,0,21,153,1,0,0,0,23,155,1,0,
        0,0,25,157,1,0,0,0,27,159,1,0,0,0,29,161,1,0,0,0,31,163,1,0,0,0,
        33,165,1,0,0,0,35,170,1,0,0,0,37,179,1,0,0,0,39,184,1,0,0,0,41,190,
        1,0,0,0,43,194,1,0,0,0,45,196,1,0,0,0,47,198,1,0,0,0,49,209,1,0,
        0,0,51,214,1,0,0,0,53,217,1,0,0,0,55,220,1,0,0,0,57,223,1,0,0,0,
        59,226,1,0,0,0,61,234,1,0,0,0,63,241,1,0,0,0,65,248,1,0,0,0,67,256,
        1,0,0,0,69,260,1,0,0,0,71,266,1,0,0,0,73,268,1,0,0,0,75,270,1,0,
        0,0,77,272,1,0,0,0,79,274,1,0,0,0,81,276,1,0,0,0,83,278,1,0,0,0,
        85,280,1,0,0,0,87,282,1,0,0,0,89,284,1,0,0,0,91,286,1,0,0,0,93,288,
        1,0,0,0,95,290,1,0,0,0,97,292,1,0,0,0,99,294,1,0,0,0,101,296,1,0,
        0,0,103,298,1,0,0,0,105,300,1,0,0,0,107,302,1,0,0,0,109,304,1,0,
        0,0,111,306,1,0,0,0,113,308,1,0,0,0,115,310,1,0,0,0,117,314,1,0,
        0,0,119,316,1,0,0,0,121,318,1,0,0,0,123,320,1,0,0,0,125,324,1,0,
        0,0,127,328,1,0,0,0,129,130,5,83,0,0,130,2,1,0,0,0,131,132,5,87,
        0,0,132,4,1,0,0,0,133,134,5,79,0,0,134,6,1,0,0,0,135,136,5,71,0,
        0,136,8,1,0,0,0,137,138,5,110,0,0,138,139,5,111,0,0,139,140,5,116,
        0,0,140,141,5,101,0,0,141,10,1,0,0,0,142,143,5,111,0,0,143,144,5,
        114,0,0,144,12,1,0,0,0,145,146,5,49,0,0,146,14,1,0,0,0,147,148,5,
        50,0,0,148,16,1,0,0,0,149,150,5,51,0,0,150,18,1,0,0,0,151,152,5,
        52,0,0,152,20,1,0,0,0,153,154,5,53,0,0,154,22,1,0,0,0,155,156,5,
        54,0,0,156,24,1,0,0,0,157,158,5,55,0,0,158,26,1,0,0,0,159,160,5,
        56,0,0,160,28,1,0,0,0,161,162,5,57,0,0,162,30,1,0,0,0,163,164,5,
        33,0,0,164,32,1,0,0,0,165,166,5,100,0,0,166,167,5,97,0,0,167,168,
        5,116,0,0,168,169,5,101,0,0,169,34,1,0,0,0,170,171,5,112,0,0,171,
        172,5,114,0,0,172,173,5,105,0,0,173,174,5,111,0,0,174,175,5,114,
        0,0,175,176,5,105,0,0,176,177,5,116,0,0,177,178,5,121,0,0,178,36,
        1,0,0,0,179,180,5,102,0,0,180,181,5,105,0,0,181,182,5,108,0,0,182,
        183,5,101,0,0,183,38,1,0,0,0,184,185,5,116,0,0,185,186,5,121,0,0,
        186,187,5,112,0,0,187,188,5,101,0,0,188,40,1,0,0,0,189,191,5,13,
        0,0,190,189,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,193,5,10,
        0,0,193,42,1,0,0,0,194,195,5,111,0,0,195,44,1,0,0,0,196,197,5,120,
        0,0,197,46,1,0,0,0,198,199,5,50,0,0,199,200,3,119,59,0,200,201,3,
        119,59,0,201,202,3,119,59,0,202,203,3,77,38,0,203,204,3,123,61,0,
        204,205,3,119,59,0,205,206,3,77,38,0,206,207,3,121,60,0,207,208,
        3,119,59,0,208,48,1,0,0,0,209,210,2,48,50,0,210,211,3,119,59,0,211,
        212,2,48,53,0,212,213,3,119,59,0,213,50,1,0,0,0,214,215,3,75,37,
        0,215,216,3,63,31,0,216,52,1,0,0,0,217,218,3,73,36,0,218,219,3,63,
        31,0,219,54,1,0,0,0,220,221,3,111,55,0,221,222,3,63,31,0,222,56,
        1,0,0,0,223,224,5,80,0,0,224,225,3,119,59,0,225,58,1,0,0,0,226,231,
        3,127,63,0,227,230,3,127,63,0,228,230,3,83,41,0,229,227,1,0,0,0,
        229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,
        232,60,1,0,0,0,233,231,1,0,0,0,234,235,3,63,31,0,235,236,3,91,45,
        0,236,237,3,117,58,0,237,239,3,117,58,0,238,240,3,117,58,0,239,238,
        1,0,0,0,239,240,1,0,0,0,240,62,1,0,0,0,241,242,3,119,59,0,242,243,
        3,119,59,0,243,244,3,123,61,0,244,245,3,119,59,0,245,246,3,121,60,
        0,246,247,3,119,59,0,247,64,1,0,0,0,248,253,3,119,59,0,249,252,3,
        127,63,0,250,252,3,83,41,0,251,249,1,0,0,0,251,250,1,0,0,0,252,255,
        1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,66,1,0,0,0,255,253,1,
        0,0,0,256,257,5,32,0,0,257,258,5,32,0,0,258,259,5,45,0,0,259,68,
        1,0,0,0,260,261,5,32,0,0,261,262,5,32,0,0,262,263,5,32,0,0,263,264,
        5,32,0,0,264,265,5,45,0,0,265,70,1,0,0,0,266,267,7,0,0,0,267,72,
        1,0,0,0,268,269,5,36,0,0,269,74,1,0,0,0,270,271,5,94,0,0,271,76,
        1,0,0,0,272,273,5,45,0,0,273,78,1,0,0,0,274,275,5,46,0,0,275,80,
        1,0,0,0,276,277,5,47,0,0,277,82,1,0,0,0,278,279,5,95,0,0,279,84,
        1,0,0,0,280,281,5,32,0,0,281,86,1,0,0,0,282,283,5,40,0,0,283,88,
        1,0,0,0,284,285,5,41,0,0,285,90,1,0,0,0,286,287,5,35,0,0,287,92,
        1,0,0,0,288,289,5,64,0,0,289,94,1,0,0,0,290,291,5,43,0,0,291,96,
        1,0,0,0,292,293,5,37,0,0,293,98,1,0,0,0,294,295,5,39,0,0,295,100,
        1,0,0,0,296,297,5,34,0,0,297,102,1,0,0,0,298,299,5,126,0,0,299,104,
        1,0,0,0,300,301,5,42,0,0,301,106,1,0,0,0,302,303,5,60,0,0,303,108,
        1,0,0,0,304,305,5,62,0,0,305,110,1,0,0,0,306,307,5,58,0,0,307,112,
        1,0,0,0,308,309,2,65,90,0,309,114,1,0,0,0,310,311,2,97,122,0,311,
        116,1,0,0,0,312,315,3,119,59,0,313,315,7,1,0,0,314,312,1,0,0,0,314,
        313,1,0,0,0,315,118,1,0,0,0,316,317,2,48,57,0,317,120,1,0,0,0,318,
        319,2,48,51,0,319,122,1,0,0,0,320,321,2,48,49,0,321,124,1,0,0,0,
        322,325,3,113,56,0,323,325,3,115,57,0,324,322,1,0,0,0,324,323,1,
        0,0,0,325,126,1,0,0,0,326,329,3,125,62,0,327,329,3,119,59,0,328,
        326,1,0,0,0,328,327,1,0,0,0,329,128,1,0,0,0,10,0,190,229,231,239,
        251,253,314,324,328,0
    ]

class ZorgQueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    NL = 21
    LOWER_O = 22
    LOWER_X = 23
    DATE = 24
    TIME = 25
    CREATE_RANGE_HEAD = 26
    MODIFY_RANGE_HEAD = 27
    DATE_RANGE_TAIL = 28
    PRIORITY = 29
    ID = 30
    ZID = 31
    SHORT_DATE = 32
    NUM_ID = 33
    TWO_SPACE_DASH = 34
    FOUR_SPACE_DASH = 35
    SYMBOL = 36
    DOLLAR = 37
    HAT = 38
    DASH = 39
    DOT = 40
    FSLASH = 41
    UNDERSCORE = 42
    SPACE = 43
    LPAREN = 44
    RPAREN = 45
    HASH = 46
    AT_SIGN = 47
    PLUS = 48
    PERCENT = 49
    SQUOTE = 50
    DQUOTE = 51
    TILDE = 52
    STAR = 53
    LANGLE = 54
    RANGLE = 55
    COLON = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'S'", "'W'", "'O'", "'G'", "'note'", "'or'", "'1'", "'2'", 
            "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'!'", "'date'", 
            "'priority'", "'file'", "'type'", "'o'", "'x'", "'  -'", "'    -'", 
            "'$'", "'^'", "'-'", "'.'", "'/'", "'_'", "' '", "'('", "')'", 
            "'#'", "'@'", "'+'", "'%'", "'''", "'\"'", "'~'", "'*'", "'<'", 
            "'>'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
            "MODIFY_RANGE_HEAD", "DATE_RANGE_TAIL", "PRIORITY", "ID", "ZID", 
            "SHORT_DATE", "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", 
            "SYMBOL", "DOLLAR", "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", 
            "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", "PERCENT", 
            "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", "RANGLE", "COLON" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
                  "MODIFY_RANGE_HEAD", "DATE_RANGE_TAIL", "PRIORITY", "ID", 
                  "ZID", "SHORT_DATE", "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", 
                  "SYMBOL", "DOLLAR", "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", 
                  "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", 
                  "PERCENT", "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", 
                  "RANGLE", "COLON", "UPPER_LETTER", "LOWER_LETTER", "ZID_CHAR", 
                  "NUM", "FIRST_D_NUM", "FIRST_M_NUM", "ALPHA", "ALPHANUM" ]

    grammarFileName = "ZorgQuery.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


