# Generated from ZorgQuery.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,62,363,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,1,1,1,
        1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
        15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,
        24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,3,26,224,8,26,1,
        26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,
        32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,5,35,263,8,
        35,10,35,12,35,266,9,35,1,36,1,36,1,36,1,36,1,36,3,36,273,8,36,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,5,38,285,8,38,10,
        38,12,38,288,9,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,
        40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,
        47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,
        53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,
        60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,3,64,348,8,64,1,
        65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,3,68,358,8,68,1,69,1,69,3,
        69,362,8,69,0,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
        54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,0,
        127,0,129,0,131,0,133,0,135,0,137,0,139,0,1,0,2,9,0,33,33,38,38,
        44,44,59,59,61,61,63,63,91,93,96,96,123,125,6,0,65,72,74,78,80,90,
        97,105,107,107,109,122,363,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
        107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
        0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,1,141,
        1,0,0,0,3,143,1,0,0,0,5,145,1,0,0,0,7,147,1,0,0,0,9,149,1,0,0,0,
        11,154,1,0,0,0,13,156,1,0,0,0,15,158,1,0,0,0,17,160,1,0,0,0,19,162,
        1,0,0,0,21,164,1,0,0,0,23,166,1,0,0,0,25,168,1,0,0,0,27,170,1,0,
        0,0,29,172,1,0,0,0,31,174,1,0,0,0,33,176,1,0,0,0,35,178,1,0,0,0,
        37,181,1,0,0,0,39,184,1,0,0,0,41,186,1,0,0,0,43,189,1,0,0,0,45,196,
        1,0,0,0,47,203,1,0,0,0,49,212,1,0,0,0,51,217,1,0,0,0,53,223,1,0,
        0,0,55,227,1,0,0,0,57,229,1,0,0,0,59,231,1,0,0,0,61,242,1,0,0,0,
        63,247,1,0,0,0,65,250,1,0,0,0,67,253,1,0,0,0,69,256,1,0,0,0,71,259,
        1,0,0,0,73,267,1,0,0,0,75,274,1,0,0,0,77,281,1,0,0,0,79,289,1,0,
        0,0,81,293,1,0,0,0,83,299,1,0,0,0,85,301,1,0,0,0,87,303,1,0,0,0,
        89,305,1,0,0,0,91,307,1,0,0,0,93,309,1,0,0,0,95,311,1,0,0,0,97,313,
        1,0,0,0,99,315,1,0,0,0,101,317,1,0,0,0,103,319,1,0,0,0,105,321,1,
        0,0,0,107,323,1,0,0,0,109,325,1,0,0,0,111,327,1,0,0,0,113,329,1,
        0,0,0,115,331,1,0,0,0,117,333,1,0,0,0,119,335,1,0,0,0,121,337,1,
        0,0,0,123,339,1,0,0,0,125,341,1,0,0,0,127,343,1,0,0,0,129,347,1,
        0,0,0,131,349,1,0,0,0,133,351,1,0,0,0,135,353,1,0,0,0,137,357,1,
        0,0,0,139,361,1,0,0,0,141,142,5,83,0,0,142,2,1,0,0,0,143,144,5,87,
        0,0,144,4,1,0,0,0,145,146,5,79,0,0,146,6,1,0,0,0,147,148,5,71,0,
        0,148,8,1,0,0,0,149,150,5,110,0,0,150,151,5,111,0,0,151,152,5,116,
        0,0,152,153,5,101,0,0,153,10,1,0,0,0,154,155,5,124,0,0,155,12,1,
        0,0,0,156,157,5,49,0,0,157,14,1,0,0,0,158,159,5,50,0,0,159,16,1,
        0,0,0,160,161,5,51,0,0,161,18,1,0,0,0,162,163,5,52,0,0,163,20,1,
        0,0,0,164,165,5,53,0,0,165,22,1,0,0,0,166,167,5,54,0,0,167,24,1,
        0,0,0,168,169,5,55,0,0,169,26,1,0,0,0,170,171,5,56,0,0,171,28,1,
        0,0,0,172,173,5,57,0,0,173,30,1,0,0,0,174,175,5,33,0,0,175,32,1,
        0,0,0,176,177,5,48,0,0,177,34,1,0,0,0,178,179,5,60,0,0,179,180,5,
        61,0,0,180,36,1,0,0,0,181,182,5,62,0,0,182,183,5,61,0,0,183,38,1,
        0,0,0,184,185,5,99,0,0,185,40,1,0,0,0,186,187,5,102,0,0,187,188,
        5,61,0,0,188,42,1,0,0,0,189,190,5,99,0,0,190,191,5,114,0,0,191,192,
        5,101,0,0,192,193,5,97,0,0,193,194,5,116,0,0,194,195,5,101,0,0,195,
        44,1,0,0,0,196,197,5,109,0,0,197,198,5,111,0,0,198,199,5,100,0,0,
        199,200,5,105,0,0,200,201,5,102,0,0,201,202,5,121,0,0,202,46,1,0,
        0,0,203,204,5,112,0,0,204,205,5,114,0,0,205,206,5,105,0,0,206,207,
        5,111,0,0,207,208,5,114,0,0,208,209,5,105,0,0,209,210,5,116,0,0,
        210,211,5,121,0,0,211,48,1,0,0,0,212,213,5,102,0,0,213,214,5,105,
        0,0,214,215,5,108,0,0,215,216,5,101,0,0,216,50,1,0,0,0,217,218,5,
        116,0,0,218,219,5,121,0,0,219,220,5,112,0,0,220,221,5,101,0,0,221,
        52,1,0,0,0,222,224,5,13,0,0,223,222,1,0,0,0,223,224,1,0,0,0,224,
        225,1,0,0,0,225,226,5,10,0,0,226,54,1,0,0,0,227,228,5,111,0,0,228,
        56,1,0,0,0,229,230,5,120,0,0,230,58,1,0,0,0,231,232,5,50,0,0,232,
        233,3,131,65,0,233,234,3,131,65,0,234,235,3,131,65,0,235,236,3,89,
        44,0,236,237,3,135,67,0,237,238,3,131,65,0,238,239,3,89,44,0,239,
        240,3,133,66,0,240,241,3,131,65,0,241,60,1,0,0,0,242,243,2,48,50,
        0,243,244,3,131,65,0,244,245,2,48,53,0,245,246,3,131,65,0,246,62,
        1,0,0,0,247,248,3,87,43,0,248,249,3,75,37,0,249,64,1,0,0,0,250,251,
        3,85,42,0,251,252,3,75,37,0,252,66,1,0,0,0,253,254,3,123,61,0,254,
        255,3,75,37,0,255,68,1,0,0,0,256,257,5,80,0,0,257,258,3,131,65,0,
        258,70,1,0,0,0,259,264,3,139,69,0,260,263,3,139,69,0,261,263,3,95,
        47,0,262,260,1,0,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,
        0,0,264,265,1,0,0,0,265,72,1,0,0,0,266,264,1,0,0,0,267,268,3,75,
        37,0,268,269,3,103,51,0,269,270,3,129,64,0,270,272,3,129,64,0,271,
        273,3,129,64,0,272,271,1,0,0,0,272,273,1,0,0,0,273,74,1,0,0,0,274,
        275,3,131,65,0,275,276,3,131,65,0,276,277,3,135,67,0,277,278,3,131,
        65,0,278,279,3,133,66,0,279,280,3,131,65,0,280,76,1,0,0,0,281,286,
        3,131,65,0,282,285,3,139,69,0,283,285,3,95,47,0,284,282,1,0,0,0,
        284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,
        287,78,1,0,0,0,288,286,1,0,0,0,289,290,5,32,0,0,290,291,5,32,0,0,
        291,292,5,45,0,0,292,80,1,0,0,0,293,294,5,32,0,0,294,295,5,32,0,
        0,295,296,5,32,0,0,296,297,5,32,0,0,297,298,5,45,0,0,298,82,1,0,
        0,0,299,300,7,0,0,0,300,84,1,0,0,0,301,302,5,36,0,0,302,86,1,0,0,
        0,303,304,5,94,0,0,304,88,1,0,0,0,305,306,5,45,0,0,306,90,1,0,0,
        0,307,308,5,46,0,0,308,92,1,0,0,0,309,310,5,47,0,0,310,94,1,0,0,
        0,311,312,5,95,0,0,312,96,1,0,0,0,313,314,5,32,0,0,314,98,1,0,0,
        0,315,316,5,40,0,0,316,100,1,0,0,0,317,318,5,41,0,0,318,102,1,0,
        0,0,319,320,5,35,0,0,320,104,1,0,0,0,321,322,5,64,0,0,322,106,1,
        0,0,0,323,324,5,43,0,0,324,108,1,0,0,0,325,326,5,37,0,0,326,110,
        1,0,0,0,327,328,5,39,0,0,328,112,1,0,0,0,329,330,5,34,0,0,330,114,
        1,0,0,0,331,332,5,126,0,0,332,116,1,0,0,0,333,334,5,42,0,0,334,118,
        1,0,0,0,335,336,5,60,0,0,336,120,1,0,0,0,337,338,5,62,0,0,338,122,
        1,0,0,0,339,340,5,58,0,0,340,124,1,0,0,0,341,342,2,65,90,0,342,126,
        1,0,0,0,343,344,2,97,122,0,344,128,1,0,0,0,345,348,3,131,65,0,346,
        348,7,1,0,0,347,345,1,0,0,0,347,346,1,0,0,0,348,130,1,0,0,0,349,
        350,2,48,57,0,350,132,1,0,0,0,351,352,2,48,51,0,352,134,1,0,0,0,
        353,354,2,48,49,0,354,136,1,0,0,0,355,358,3,125,62,0,356,358,3,127,
        63,0,357,355,1,0,0,0,357,356,1,0,0,0,358,138,1,0,0,0,359,362,3,137,
        68,0,360,362,3,131,65,0,361,359,1,0,0,0,361,360,1,0,0,0,362,140,
        1,0,0,0,10,0,223,262,264,272,284,286,347,357,361,0
    ]

class ZorgQueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    NL = 27
    LOWER_O = 28
    LOWER_X = 29
    DATE = 30
    TIME = 31
    CREATE_RANGE_HEAD = 32
    MODIFY_RANGE_HEAD = 33
    DATE_RANGE_TAIL = 34
    PRIORITY = 35
    ID = 36
    ZID = 37
    SHORT_DATE = 38
    NUM_ID = 39
    TWO_SPACE_DASH = 40
    FOUR_SPACE_DASH = 41
    SYMBOL = 42
    DOLLAR = 43
    HAT = 44
    DASH = 45
    DOT = 46
    FSLASH = 47
    UNDERSCORE = 48
    SPACE = 49
    LPAREN = 50
    RPAREN = 51
    HASH = 52
    AT_SIGN = 53
    PLUS = 54
    PERCENT = 55
    SQUOTE = 56
    DQUOTE = 57
    TILDE = 58
    STAR = 59
    LANGLE = 60
    RANGLE = 61
    COLON = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'S'", "'W'", "'O'", "'G'", "'note'", "'|'", "'1'", "'2'", "'3'", 
            "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'!'", "'0'", "'<='", 
            "'>='", "'c'", "'f='", "'create'", "'modify'", "'priority'", 
            "'file'", "'type'", "'o'", "'x'", "'  -'", "'    -'", "'$'", 
            "'^'", "'-'", "'.'", "'/'", "'_'", "' '", "'('", "')'", "'#'", 
            "'@'", "'+'", "'%'", "'''", "'\"'", "'~'", "'*'", "'<'", "'>'", 
            "':'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
            "MODIFY_RANGE_HEAD", "DATE_RANGE_TAIL", "PRIORITY", "ID", "ZID", 
            "SHORT_DATE", "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", 
            "SYMBOL", "DOLLAR", "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", 
            "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", "PERCENT", 
            "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", "RANGLE", "COLON" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "NL", "LOWER_O", "LOWER_X", "DATE", "TIME", "CREATE_RANGE_HEAD", 
                  "MODIFY_RANGE_HEAD", "DATE_RANGE_TAIL", "PRIORITY", "ID", 
                  "ZID", "SHORT_DATE", "NUM_ID", "TWO_SPACE_DASH", "FOUR_SPACE_DASH", 
                  "SYMBOL", "DOLLAR", "HAT", "DASH", "DOT", "FSLASH", "UNDERSCORE", 
                  "SPACE", "LPAREN", "RPAREN", "HASH", "AT_SIGN", "PLUS", 
                  "PERCENT", "SQUOTE", "DQUOTE", "TILDE", "STAR", "LANGLE", 
                  "RANGLE", "COLON", "UPPER_LETTER", "LOWER_LETTER", "ZID_CHAR", 
                  "NUM", "FIRST_D_NUM", "FIRST_M_NUM", "ALPHA", "ALPHANUM" ]

    grammarFileName = "ZorgQuery.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


