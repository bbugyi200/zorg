# Generated from src/zorg/grammar/zorg_file/ZorgFile.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,179,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,
        10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,3,17,121,8,
        17,1,17,1,17,1,18,4,18,126,8,18,11,18,12,18,127,1,18,1,18,5,18,132,
        8,18,10,18,12,18,135,9,18,5,18,137,8,18,10,18,12,18,140,9,18,1,18,
        3,18,143,8,18,1,18,3,18,146,8,18,1,19,1,19,3,19,150,8,19,1,20,1,
        20,1,21,1,21,1,22,1,22,1,23,1,23,3,23,160,8,23,1,24,1,24,3,24,164,
        8,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,
        3,29,178,8,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        0,43,0,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,1,0,1,7,0,33,33,40,
        41,44,44,58,63,91,91,93,94,124,124,180,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,65,
        1,0,0,0,7,67,1,0,0,0,9,70,1,0,0,0,11,72,1,0,0,0,13,74,1,0,0,0,15,
        76,1,0,0,0,17,79,1,0,0,0,19,81,1,0,0,0,21,83,1,0,0,0,23,85,1,0,0,
        0,25,88,1,0,0,0,27,91,1,0,0,0,29,101,1,0,0,0,31,109,1,0,0,0,33,115,
        1,0,0,0,35,120,1,0,0,0,37,125,1,0,0,0,39,149,1,0,0,0,41,151,1,0,
        0,0,43,153,1,0,0,0,45,155,1,0,0,0,47,159,1,0,0,0,49,163,1,0,0,0,
        51,165,1,0,0,0,53,167,1,0,0,0,55,169,1,0,0,0,57,171,1,0,0,0,59,177,
        1,0,0,0,61,62,5,35,0,0,62,2,1,0,0,0,63,64,5,111,0,0,64,4,1,0,0,0,
        65,66,5,32,0,0,66,6,1,0,0,0,67,68,5,91,0,0,68,69,5,35,0,0,69,8,1,
        0,0,0,70,71,5,93,0,0,71,10,1,0,0,0,72,73,5,45,0,0,73,12,1,0,0,0,
        74,75,5,40,0,0,75,14,1,0,0,0,76,77,5,58,0,0,77,78,5,58,0,0,78,16,
        1,0,0,0,79,80,5,64,0,0,80,18,1,0,0,0,81,82,5,37,0,0,82,20,1,0,0,
        0,83,84,5,43,0,0,84,22,1,0,0,0,85,86,5,91,0,0,86,87,5,91,0,0,87,
        24,1,0,0,0,88,89,5,93,0,0,89,90,5,93,0,0,90,26,1,0,0,0,91,92,5,35,
        0,0,92,93,5,35,0,0,93,94,5,35,0,0,94,95,5,35,0,0,95,96,5,35,0,0,
        96,97,5,35,0,0,97,98,5,35,0,0,98,99,5,35,0,0,99,100,5,35,0,0,100,
        28,1,0,0,0,101,102,5,61,0,0,102,103,5,61,0,0,103,104,5,61,0,0,104,
        105,5,61,0,0,105,106,5,61,0,0,106,107,5,61,0,0,107,108,5,61,0,0,
        108,30,1,0,0,0,109,110,5,42,0,0,110,111,5,42,0,0,111,112,5,42,0,
        0,112,113,5,42,0,0,113,114,5,42,0,0,114,32,1,0,0,0,115,116,5,45,
        0,0,116,117,5,45,0,0,117,118,5,45,0,0,118,34,1,0,0,0,119,121,5,13,
        0,0,120,119,1,0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,122,123,5,10,
        0,0,123,36,1,0,0,0,124,126,3,49,24,0,125,124,1,0,0,0,126,127,1,0,
        0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,138,1,0,0,0,129,133,3,59,
        29,0,130,132,3,49,24,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,
        0,0,0,133,134,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,136,129,1,
        0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,142,1,
        0,0,0,140,138,1,0,0,0,141,143,5,40,0,0,142,141,1,0,0,0,142,143,1,
        0,0,0,143,145,1,0,0,0,144,146,5,41,0,0,145,144,1,0,0,0,145,146,1,
        0,0,0,146,38,1,0,0,0,147,150,7,0,0,0,148,150,3,59,29,0,149,147,1,
        0,0,0,149,148,1,0,0,0,150,40,1,0,0,0,151,152,2,65,90,0,152,42,1,
        0,0,0,153,154,2,97,122,0,154,44,1,0,0,0,155,156,2,48,57,0,156,46,
        1,0,0,0,157,160,3,41,20,0,158,160,3,43,21,0,159,157,1,0,0,0,159,
        158,1,0,0,0,160,48,1,0,0,0,161,164,3,47,23,0,162,164,3,45,22,0,163,
        161,1,0,0,0,163,162,1,0,0,0,164,50,1,0,0,0,165,166,5,45,0,0,166,
        52,1,0,0,0,167,168,5,46,0,0,168,54,1,0,0,0,169,170,5,47,0,0,170,
        56,1,0,0,0,171,172,5,95,0,0,172,58,1,0,0,0,173,178,3,51,25,0,174,
        178,3,53,26,0,175,178,3,55,27,0,176,178,3,57,28,0,177,173,1,0,0,
        0,177,174,1,0,0,0,177,175,1,0,0,0,177,176,1,0,0,0,178,60,1,0,0,0,
        11,0,120,127,133,138,142,145,149,159,163,177,0
    ]

class ZorgFileLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    NL = 18
    ID = 19
    SYMBOL = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#'", "'o'", "' '", "'[#'", "']'", "'-'", "'('", "'::'", "'@'", 
            "'%'", "'+'", "'[['", "']]'", "'#########'", "'======='", "'*****'", 
            "'---'" ]

    symbolicNames = [ "<INVALID>",
            "NL", "ID", "SYMBOL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "NL", "ID", "SYMBOL", "UPPER_LETTER", 
                  "LOWER_LETTER", "DIGIT", "LETTER", "ALPANUM", "DASH", 
                  "DOT", "SLASH", "UNDERSCORE", "ID_SYMBOL" ]

    grammarFileName = "ZorgFile.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


